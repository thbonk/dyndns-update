name: Build and Release

on:
 workflow_dispatch:
   inputs:
     version:
       description: 'Version number (without v prefix)'
       required: true
       type: string

jobs:
 build:
   name: Swift ${{ matrix.swift }} on ${{ matrix.os }} (${{ matrix.arch }})
   strategy:
     matrix:
       os: [macos-latest, ubuntu-22.04]
       swift: ["6.0"]
       arch: [x86_64, arm64]
       exclude:
         - os: ubuntu-22.04
           arch: arm64
   runs-on: ${{ matrix.os }}
   steps:
   - uses: swift-actions/setup-swift@v2
     with:
       swift-version: ${{ matrix.swift }}
   - uses: actions/checkout@v4
   - name: Build
     run: |
       if [ "${{ matrix.os }}" = "macos-latest" ]; then
         swift build -c release --arch ${{ matrix.arch }}
       else
         swift build -c release
       fi
       cp .build/release/${{ github.event.repository.name }} .
   - name: Import Certificate
     if: matrix.os == 'macos-latest'
     env:
       CERTIFICATE_BASE64: ${{ secrets.CERTIFICATE_BASE64 }}
       CERTIFICATE_PASSWORD: ${{ secrets.CERTIFICATE_PASSWORD }}
       KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
     run: |
       echo $CERTIFICATE_BASE64 | base64 --decode > certificate.p12
       security create-keychain -p $KEYCHAIN_PASSWORD build.keychain
       security default-keychain -s build.keychain
       security unlock-keychain -p $KEYCHAIN_PASSWORD build.keychain
       security import certificate.p12 -k build.keychain -P $CERTIFICATE_PASSWORD -T /usr/bin/codesign
   - name: Sign and Notarize
     if: matrix.os == 'macos-latest'
     env:
       APPLE_ID: ${{ secrets.APPLE_ID }}
       APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
       APPLE_PASSWORD: ${{ secrets.APPLE_APP_PASSWORD }}
     run: |
       # Sign
       codesign --force --options runtime --sign "Developer ID Application: Thomas Bonk (Thomas Bonk)" ${{ github.event.repository.name }}

       # Create ZIP for notarization
       ditto -c -k --keepParent ${{ github.event.repository.name }} ${{ github.event.repository.name }}.zip

       # Notarize
       xcrun notarytool submit ${{ github.event.repository.name }}.zip \
         --apple-id "$APPLE_ID" \
         --password "$APPLE_PASSWORD" \
         --team-id "$APPLE_TEAM_ID" \
         --wait
        # Staple
        xcrun stapler staple ${{ github.event.repository.name }}
   - name: Compress Binary
     run: tar -czf ${{ github.event.repository.name }}-${{ inputs.version }}-${{ matrix.os }}-${{ matrix.arch }}.tar.gz ${{ github.event.repository.name }}
   - name: Upload Binary
     uses: actions/upload-artifact@v4
     with:
       name: ${{ github.event.repository.name }}-${{ matrix.os }}-${{ matrix.arch }}
       path: ${{ github.event.repository.name }}-${{ inputs.version }}-${{ matrix.os }}-${{ matrix.arch }}.tar.gz

 release:
   name: Creating release v${{ inputs.version }}
   needs: build
   runs-on: ubuntu-latest
   steps:
   - uses: actions/checkout@v4
   - name: Download Artifacts
     uses: actions/download-artifact@v4
   - name: Create Source Archive
     run: |
       git archive --format=tar.gz --output=${{ github.event.repository.name }}-${{ inputs.version }}-src.tar.gz HEAD
   - name: Create Release
     uses: softprops/action-gh-release@v2
     with:
       name: Release v${{ inputs.version }}
       tag_name: v${{ inputs.version }}
       token: ${{ secrets.DYNDNS_UPDATE_GITHUB_TOKEN }}
       files: |
         ${{ github.event.repository.name }}-${{ inputs.version }}-*
         */*.tar.gz
